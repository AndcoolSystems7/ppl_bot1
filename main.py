"""
Pepeland bandage bot
–ü—Ä–æ–µ–∫—Ç –∑–∞—â–∏—â—ë–Ω –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º
created by AndcoolSystems, 2023¬©
"""

import logging
logging.basicConfig(level=logging.INFO)
try: 
	import replit
	on_server = True
except: on_server = False

server_text = "replit" if on_server else "local"
logging.info(f"Running on {server_text} server")
#print(f"INFO:Running on {server_text} server")

if on_server: from scripts.background import keep_alive
import aiogram
import scripts.client as client
import os
from PIL import Image
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime  #–ú–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–∏
import pytz
import time as time1
from aiogram.utils.markdown import link
from io import BytesIO
import numpy as np
import scripts.help_renderer as help_renderer
import random
import scripts.da as da
import aioschedule as schedule
import asyncio


if on_server: API_TOKEN = '6121533259:AAHe4O1XP63PtF6RfYf_hJ5QFyMp6J387SU'
else: API_TOKEN = '5850445478:AAFx4SZdD1IkSWc4h_0qU9IoXyT8VAElbTE'

logger = logging.getLogger('schedule')
logger.setLevel(logging.WARNING)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
da.init(bot, dp)
listOfClients = []
andcool_alert = False
if not os.path.exists("data/Alert_not.npy"):
	not_alert = np.array([])
	np.save("data/Alert_not.npy", not_alert)
else:
	not_alert = np.load("data/Alert_not.npy")


#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['changeUsername', 'changeBalance'])
async def send_welcome(message: types.Message):
	if message.from_user.id == 1197005557:
		message_list = message.text.split(" ")
		list = da.get_list()
		id = -1
		finded = False
		for x in range(len(list)):
			if int(list[x][2]) == int(message_list[1]):
				finded = True
				id = x
				break
		if not finded: await message.answer(text=f"User not found")
		else:
			if message_list[0] == '/changeUsername':
				list[id][0] = message_list[2]
				da.set_list(list)
				await message.answer(text=f"Done")
			
			if message_list[0] == '/changeBalance':
				list[id][1] = str(message_list[2])
				da.set_list(list)
				await message.answer(text=f"Done")
#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['checkme'])
async def send_welcome(message: types.Message):
	list = da.get_list()
	finded = False
	for x in range(len(list)):
		if int(list[x][2]) == message.from_user.id:
			await message.answer(text=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {list[x][0]}, –≤–∞—à –±–∞–ª–∞–Ω—Å {list[x][1]} *RUB*", parse_mode="Markdown")
			logging.info(f"{list[x][0]}")
			finded = True
			break
	if not finded: await message.answer(text=f"–í—ã –µ—â—ë –Ω–µ –¥–æ–Ω–∞—Ç–∏–ª–∏ :)")
#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['sendAlert'])
async def send_welcome(message: types.Message):
	global andcool_alert
	if message.from_user.id == 1197005557:
		await message.answer(text="–•–æ—Ä–æ—à–æ, AndcoolSystems, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥—Ä—É–≥–∏–º")
		andcool_alert = True

#---------------------------------------------------------------------------------------------------

@dp.message_handler(commands=['sendToId'])
async def send_welcome(message: types.Message):
	if message.from_user.id == 1197005557:
		id = message.text.split(" ")[1]
		text = " ".join(message.text.split(" ")[2:])
		await bot.send_message(id, "–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n" + text)

#---------------------------------------------------------------------------------------------------

@dp.message_handler(commands=['support'])
async def send_welcome(message: types.Message):
	global listOfClients
	if listOfClients == []: listOfClients.append(client.Client(message.chat.id))
	else:
		finded = False
		for add in range(len(listOfClients)):
			if listOfClients[add].chat_id == message.chat.id:
				finded == True
				listOfClients[add] = client.Client(message.chat.id)
				break
		if not finded: listOfClients.append(client.Client(message.chat.id))

	id1 = message.chat.id

	id = client.find_client(listOfClients, message.chat.id)

	listOfClients[id].wait_to_support = True
	await message.answer(text="–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å *–æ–¥–Ω–æ* —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é), –≥–¥–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.", parse_mode="Markdown")


#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['startalerts'])
async def send_welcome(message: types.Message):
	global not_alert

	
	if not message.from_user.id in not_alert: 
		not_alert = np.append(not_alert, message.from_user.id)
		await message.answer(text="–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º)\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Ö –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ /stopalerts")
		np.save("data/Alert_not.npy", not_alert)
	else: await message.answer(text="–û–ø–æ–≤–µ—â–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∏—Ö –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏–≤ /stopalerts")



#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['stopalerts'])
async def send_welcome(message: types.Message):
	global not_alert
	counter = 0
	if not_alert.size > 0:
		for x in not_alert:
			
			if x == message.from_user.id:
				not_alert = np.delete(not_alert, counter)
				await message.answer(text="–û–∫–µ–π, —Ç–µ–ø–µ—Ä—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–∞–º)\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ /startalerts")
			counter+=1
		np.save("data/Alert_not.npy", not_alert)

#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):

	text1 = "PPL –ø–æ–≤—è–∑–∫–∞ - —ç—Ç–æ –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è –ø–æ–≤—è–∑–∫–∏ –ü–µ–ø–µ–ª–µ–Ω–¥–∞ –Ω–∞ –≤–∞—à —Å–∫–∏–Ω.\n"
	text2 = "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
	text3 = "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ—à–∏–±–æ–∫ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ *–î–∏—Å–∫–æ—Ä–¥ andcoolsystems*\n–∏–ª–∏ *–æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É* /support\n\n"
	if on_server:
		f = open("pyproject.toml")
		ver = f.read().split("\n")[2][11:-1]
		text5 = f"–í–µ—Ä—Å–∏—è *{ver}*\n"
		f.close()
	else: text5 = ""
	text4 = "*Created by AndcoolSystems*"
	donate_text = ""
	if os.path.isfile("data/donations.npy"):
		donate_text = "\n\n–õ—é–¥–∏, –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–µ –ø—Ä–æ–µ–∫—Ç:\n"
		donateList_npy = np.load("data/donations.npy")
		donateList = donateList_npy.tolist()

		donateList = da.sortir(donateList)

		count = 0
		for x_p in range(len(donateList)):
			if donateList[x_p][0] != 0:
				count += 1
		count = min(count, 10)
		emotes = ["ü•á", "ü•à", "ü•â"]
		for x in range(count):
			emote = emotes[x] if x < 3 else ""
			donate_text = f"{donate_text}{x + 1}. {emote}*{donateList[x][0]}* - {round(float(donateList[x][1]), 2)} *RUB*\n"

		donate_text = donate_text + "\n–•–æ—Ç–∏—Ç–µ —Å—é–¥–∞? –¢–æ–≥–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ /donate"



	bio = BytesIO()
	bio.name = f'{message.from_user.id}.png'
	help_renderer.render().save(bio, 'PNG')
	bio.seek(0)

	msg = await message.answer_photo(bio, caption=text1+text2+text3+text5+text4+donate_text, parse_mode='Markdown')

#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['changelog'])
async def send_welcome(message: types.Message):
	
	f = open("README.md", encoding="UTF8")
	ver = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ" + f.read().split("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")[1]
	f.close()

	big_button_1: InlineKeyboardButton = InlineKeyboardButton(
		text='–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π', url="https://github.com/AndcoolSystems7/PepelandBotChangelog/blob/main/README.md")

	keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
		inline_keyboard=[[big_button_1]])
	await message.answer(text=f"{ver}", parse_mode= 'Markdown', reply_markup=keyboard)


#---------------------------------------------------------------------------------------------------
async def render_and_edit(message, id, id1):
	global listOfClients
	bio = BytesIO()
	skin_rer = await listOfClients[id].rerender()

	bio.name = f'{id1}.png'
	skin_rer.save(bio, 'PNG')
	bio.seek(0)
	photo1 = types.input_media.InputMediaPhoto(media=bio, caption="–í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")

	try: listOfClients[id].prewiew_id = await bot.edit_message_media(photo1,
							     chat_id=listOfClients[id].prewiew_id.chat.id,
								 message_id=listOfClients[id].prewiew_id.message_id)
	except:pass


#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
	global andcool_alert
	if message.from_user.id == 1197005557:
		andcool_alert = False
	now_time_log = datetime.now(pytz.timezone('Etc/GMT-3'))

	now_time_format = "{}.{}.{}-{}:{}".format(now_time_log.day,
											now_time_log.month,
											now_time_log.year,
											now_time_log.hour,
											now_time_log.minute)

	big_button_1: InlineKeyboardButton = InlineKeyboardButton(
		text='–ò–∑ —Ñ–∞–π–ª–∞', callback_data='file')

	big_button_2: InlineKeyboardButton = InlineKeyboardButton(
		text='–ü–æ –Ω–∏–∫—É', callback_data='nick')

	# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup()
	keyboard.row(big_button_2, big_button_1)
	tt = "start_secret" if random.randint(0, 100) == 50 else "start"
	if tt == "start_secret": logging.info(f"{message.from_user.username} got a secret start image!")
	welcome_msg = Image.open(f"res/presets/{tt}.png")
	bio = BytesIO()
	bio.name = f'{message.from_user.id}.png'
	welcome_msg.save(bio, 'PNG')
	bio.seek(0)
	await message.answer_photo(photo=bio, caption="–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º.\n–û—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å —Å–∫–∏–Ω?",
											 reply_markup=keyboard)
	global listOfClients
	if listOfClients == []: listOfClients.append(client.Client(message.chat.id))
	else:
		finded = False
		for add in range(len(listOfClients)):
			if listOfClients[add].chat_id == message.chat.id:
				finded == True
				listOfClients[add] = client.Client(message.chat.id)
				break
		if not finded: listOfClients.append(client.Client(message.chat.id))
	f_usr_list = []

	if os.path.isfile("data/usr.txt"):
		userListFile = open("data/usr.txt", 'r', encoding='utf-8')
		f_usr_list = userListFile.read().split("\n")
		userListFile.close()
		userListFile = open("data/usr.txt", 'a', encoding='utf-8')

	else:
		userListFile = open("data/usr.txt", 'w', encoding='utf-8')
		userListFile.close()
		userListFile = open("data/usr.txt", 'a', encoding='utf-8')

	if os.path.isfile("data/usr_use.txt"):
		userListFile1 = open("data/usr_use.txt", 'a', encoding='utf-8')

	else:
		userListFile1 = open("data/usr_use.txt", 'w', encoding='utf-8')
		userListFile1.close()
		userListFile1 = open("data/usr_use.txt", 'a', encoding='utf-8')
	if f_usr_list != []:
		if not str(f"{message.from_user.username} - {message.from_user.id}") in f_usr_list:
			userListFile.write(f"{message.from_user.username} - {message.from_user.id}\n")

	userListFile1.write(f"{message.from_user.username} - {now_time_format} - {message.from_user.id}\n")
	userListFile.close()
	userListFile1.close()

	


#---------------------------------------------------------------------------------------------------
@dp.message_handler(commands=['donate'])
async def send_welcome(message: types.Message):
	"""img = Image.open("res/presets/thanks.png")
	bio = BytesIO()
	bio.name = f'{id}.png'
	img.save(bio, 'PNG')
	bio.seek(0)"""
   
	big_button_1: InlineKeyboardButton = InlineKeyboardButton(
		text='DonationAlerts', url="https://www.donationalerts.com/r/andcool_systems")

	keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(
		inline_keyboard=[[big_button_1]])
	"""await message.answer_photo(photo=bio, caption=f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å DonationAlerts\n–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–æ–Ω–∞—Ç—É –æ—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–æ *{message.from_user.id}*, –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.",
											 reply_markup=keyboard, parse_mode="Markdown")"""
	await message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å DonationAlerts\n–í –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –¥–æ–Ω–∞—Ç—É –æ—Å—Ç–∞–≤—å—Ç–µ —á–∏—Å–ª–æ *{message.from_user.id}*, –∞ –∑–∞—Ç–µ–º, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.",
											 reply_markup=keyboard, parse_mode="Markdown")
#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="file")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await message.message.answer(
		'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π —Å–∫–∏–Ω.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–±–µ—Ä–∏ –≥–∞–ª–æ—á–∫—É "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"'
	)
	await message.message.delete()
	
	listOfClients[id].wait_to_file = 1

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="nick")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await message.message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º.")
	await message.message.delete()
	
	listOfClients[id].wait_to_file = 2

#---------------------------------------------------------------------------------------------------
@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message: types.Message):
	global listOfClients
	global andcool_alert
	
	if andcool_alert == True and message.from_user.id == 1197005557:
		
		await message.photo[-1].download(destination_file=f'alert.png')

		photo = open(f'alert.png', 'rb')
		global not_alert
		for x in not_alert:
			if x != "\n" and x != "":
				try:
					photo = open(f'alert.png', 'rb')
					await bot.send_photo(chat_id=int(x), caption=f"{message.caption}\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /stopalerts", photo=photo)
				except: pass

		photo.close()
		os.remove('alert.png')
		andcool_alert = False
	else:
		id = client.find_client(listOfClients, message.chat.id)

		if id == -1: 
			await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
			return
		
		if listOfClients[id].wait_to_support:
			await message.photo[-1].download(destination_file=f'file.png')
			photo = open(f'file.png', 'rb')
			await bot.send_photo(chat_id=-952490573, caption=f"{message.caption}\n\n–û—Ç–ø—Ä–∞–≤–∏–ª: {message.from_user.username}\n–ï–≥–æ id: {message.from_user.id}", photo=photo)
	
			photo.close()
			os.remove('file.png')
			listOfClients[id].wait_to_support = False
		elif listOfClients[id].wait_to_file == 1:
			await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É —Å–∫–∏–Ω–∞ –∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–∫–µ —Å–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É "–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"')



#---------------------------------------------------------------------------------------------------
@dp.message_handler(content_types=['document'])
async def handle_docs_photo(message: types.Message):
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return

	if listOfClients[id].wait_to_file == 1:
		id1 = message.chat.id
		#print(message.document.file_size)
		if document := message.document:
			try:
				await document.download(destination_file=f'{id1}.png')
			except aiogram.utils.exceptions.FileIsTooBig:
				text1 = '–¢—ã —Å–µ—Ä—ë–∑–Ω–æ –ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –æ–±—ä—ë–º–æ–º –±–æ–ª–µ–µ *20 –ú–µ–≥–∞–±–∞–π—Ç*?ü§®\n–ó–∞—á–µ–º? –û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω –∏–º–µ–µ—Ç –æ–±—ä—ë–º –ø—Ä–∏–º–µ—Ä–Ω–æ *4 –ö–∏–ª–æ–±–∞–π—Ç*.\n–ß—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª —ç—Ç–∏–º –¥–æ–∫–∞–∑–∞—Ç—å?\n'
				text2 = "–¢—ã –∂–¥–∞–ª –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è —Ñ–∞–π–ª, —Ä–∞–¥–∏ —á–µ–≥–æ? –†–∞–¥–∏ –º–∏–Ω—É—Ç–Ω–æ–π –∑–∞–±–∞–≤—ã?\n–¢—ã –ø—ã—Ç–∞–ª—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –±–æ—Ç—É, –∫—Ç–æ —Ç—É—Ç –≥–ª–∞–≤–Ω—ã–π, –Ω–æ —Å–∞–º –ø—Ä–æ–∏–≥—Ä–∞–ª.\n"
				await message.reply(text1 + text2, parse_mode="Markdown")
				return
		try:
			usr_img = Image.open(f'{id1}.png').convert("RGBA")
			w, h = usr_img.size
			done = True
			for y_ch in range(3):
				for x_ch in range(3):
					r, g, b, t = usr_img.getpixel((x_ch, y_ch))
					if t != 0:
						done = False
						break

			if not done:
				await message.answer("–£ –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω!\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º!")
	
			if w == 64 and h == 64:
				await listOfClients[id].init_mc_f(usr_img)
				listOfClients[id].wait_to_file = 0

				await listOfClients[id].prerender()

				skin_rer = await listOfClients[id].rerender()
				bio = BytesIO()
				bio.name = f'{id1}.png'
				skin_rer.save(bio, 'PNG')
				bio.seek(0)

				msg = await message.answer_photo(bio,
												"–í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
				listOfClients[id].prewiew_id = msg
				


				os.remove(f'{id1}.png')

				msg = await colorDialog(message, id)
				listOfClients[id].info_id = msg
			else:
				await message.reply(
					"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ png —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 64—Ö64 –ø–∏–∫—Å–µ–ª–µ–π"
				)
				usr_img.close()
				os.remove(f'{id1}.png')
		except:
			await message.reply(
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–≤—ë—Ä—Ç–∫—É —Å–∫–∏–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ png —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º 64—Ö64 –ø–∏–∫—Å–µ–ª–µ–π"
			)
			os.remove(f'{id1}.png')


#---------------------------------------------------------------------------------------------------
colour_txt = ["blue", "yellow", "green", "red", "pink", "violet", "orange", "black", "white"]
@dp.callback_query_handler(text=colour_txt)
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	global colour_txt
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return


	colours = [(61, 58, 201), (250, 213, 30), (85, 163, 64), (176, 30, 30), (252, 15, 192), (105, 0, 198), (255, 102, 0), (0, 0, 0), (255, 255, 255)]
	listOfClients[id].colour = colours[colour_txt.index(message.data)]

	await render_and_edit(message.message, id, id1)
	await acceptChoose(message.message)


#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="done_c")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="custom")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await listOfClients[id].info_id.delete()
	listOfClients[id].colour = 5

	listOfClients[id].wait_to_file = 3

	#await message.message.delete()

	msg = await message.message.answer(
		"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *HEX* –∏–ª–∏ *RGB*\n–¶–≤–µ—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ https://colorscheme.ru/color-converter.html", parse_mode= 'Markdown'
	)
	listOfClients[id].info_id = msg

#---------------------------------------------------------------------------------------------------
async def acceptChoose(message):
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	big_button_4: InlineKeyboardButton = InlineKeyboardButton(
			text='–ì–æ—Ç–æ–≤–æ ‚úì', callback_data='done_d')

	big_button_5: InlineKeyboardButton = InlineKeyboardButton(
		text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç', callback_data='colD')

	keyboard1: InlineKeyboardMarkup = InlineKeyboardMarkup(
		inline_keyboard=[[big_button_4], [big_button_5]])
	await listOfClients[id].info_id.edit_text("–ì–æ—Ç–æ–≤–æ?", reply_markup=keyboard1)


#---------------------------------------------------------------------------------------------------
async def reset_accept(message):
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	big_button_4: InlineKeyboardButton = InlineKeyboardButton(
			text='–î–∞ ‚úì', callback_data='resetAccept')

	big_button_5: InlineKeyboardButton = InlineKeyboardButton(
		text='–ù–µ—Ç ‚úó', callback_data='resetDeny')

	keyboard1: InlineKeyboardMarkup = InlineKeyboardMarkup(
		inline_keyboard=[[big_button_4], [big_button_5]])
	await listOfClients[id].info_id.edit_text("–°–±—Ä–æ—Å–∏—Ç—å?\n–¢–æ—á–Ω–æ?", reply_markup=keyboard1)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="resetDeny")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await start_set(message.message)


#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="resetAccept")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	id1 = message.message.chat.id
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return

	listOfClients[id].pos = 4
	listOfClients[id].overlay = True
	listOfClients[id].bw = False
	listOfClients[id].negative = False
	listOfClients[id].pose = 0
	listOfClients[id].absolute_pos = 0
	listOfClients[id].pepe_type = 0
	listOfClients[id].first_layer = 1

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)


#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="colD")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	msg = await colorDialog(message.message, id)
	
	
#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="done_d")
async def from_f(message: CallbackQuery):
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await start_set(message.message)
#---------------------------------------------------------------------------------------------------

async def done_accept(message):
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	big_button_4: InlineKeyboardButton = InlineKeyboardButton(
			text='–î–∞ ‚úì', callback_data='donetAccept')

	big_button_5: InlineKeyboardButton = InlineKeyboardButton(
		text='–ù–µ—Ç ‚úó', callback_data='doneDeny')

	keyboard1: InlineKeyboardMarkup = InlineKeyboardMarkup(
		inline_keyboard=[[big_button_4], [big_button_5]])
	await listOfClients[id].info_id.edit_text("–ì–æ—Ç–æ–≤–æ? –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∏–Ω –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!", reply_markup=keyboard1)


#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="donetAccept")
async def from_f(message: CallbackQuery):
	global listOfClients
	id1 = message.message.chat.id
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	bio = BytesIO()
	bio.name = f'{id1}.png'
	listOfClients[id].skin_raw.save(bio, 'PNG')
	bio.seek(0)
	await message.message.answer_document(bio)
	await listOfClients[id].info_id.delete()
	listOfClients.pop(id)

@dp.callback_query_handler(text="doneDeny")
async def from_f(message: CallbackQuery):
	global listOfClients
	id1 = message.message.chat.id
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await start_set(message.message)
#---------------------------------------------------------------------------------------------------
async def colorDialog(message, id):
	global listOfClients
	
	big_button_1: InlineKeyboardButton = InlineKeyboardButton(
		text='–°–∏–Ω–∏–π', callback_data='blue')

	big_button_2: InlineKeyboardButton = InlineKeyboardButton(
		text='–ö—Ä–∞—Å–Ω—ã–π', callback_data='red')
	big_button_3: InlineKeyboardButton = InlineKeyboardButton(
		text='–ó–µ–ª—ë–Ω—ã–π', callback_data='green')
	big_button_4: InlineKeyboardButton = InlineKeyboardButton(
		text='–ñ—ë–ª—Ç—ã–π', callback_data='yellow')
	
	pink_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–†–æ–∑–æ–≤—ã–π', callback_data='pink')
	
	violet_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–§–∏–æ–ª–µ—Ç–æ–≤—ã–π', callback_data='violet')
	
	orange_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–û—Ä–∞–Ω–∂–µ–≤—ã–π', callback_data='orange')
	
	white_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ë–µ–ª—ã–π', callback_data='white')
	
	black_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ß—ë—Ä–Ω—ã–π', callback_data='black')

	custom_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ö–∞—Å—Ç–æ–º–Ω—ã–π', callback_data='custom')

			# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	keyboard1: InlineKeyboardMarkup = InlineKeyboardMarkup()

	keyboard1.row(big_button_1, big_button_2, big_button_3)
	keyboard1.row(big_button_4, pink_btn, violet_btn)
	keyboard1.row(orange_btn, white_btn, black_btn)

	keyboard1.row(custom_btn)
	
	if listOfClients[id].info_id == 0:
		msg = await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –ø–æ–≤—è–∑–∫–∏",
															reply_markup=keyboard1)
	else:
		msg = await listOfClients[id].info_id.edit_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –ø–æ–≤—è–∑–∫–∏",
															reply_markup=keyboard1)
	return msg
#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="done")
async def from_f(message: CallbackQuery):
	global listOfClients
	id1 = message.message.chat.id
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	await done_accept(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="bandage_dwnd")
async def from_f(message: CallbackQuery):
	global listOfClients
	id1 = message.message.chat.id
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	
	bio = BytesIO()
	bio.name = f'{id1}.png'
	listOfClients[id].bandage.save(bio, 'PNG')
	bio.seek(0)
	await message.message.answer_document(bio)


#---------------------------------------------------------------------------------------------------
async def start_set(message):
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return

	up_btn: InlineKeyboardButton = InlineKeyboardButton(text='‚Üë',																			
										callback_data='up')

	info_btn: InlineKeyboardButton = InlineKeyboardButton(
		text=f'{listOfClients[id].pos}/8', callback_data='no')
	
	down_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='‚Üì', callback_data='down')
	
	first_layer_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ü–µ—Ä–≤—ã–π —Å–ª–æ–π', callback_data='first')

	bw_btn: InlineKeyboardButton = InlineKeyboardButton(text='–í —á/–±',
												callback_data='bw')

	negative_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='negative')

	pose_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ü–æ–∑–∞', callback_data='pose')

	overlay_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–û–≤–µ—Ä–ª–µ–π', callback_data='over')
	
	bodyPart_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ß–∞—Å—Ç—å —Ç–µ–ª–∞', callback_data='body_part')
	
	pepetype_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–¢–∏–ø –ø–µ–ø–µ', callback_data='pepe')
	
	bndg_downl: InlineKeyboardButton = InlineKeyboardButton(
		text='–°–∫–∞—á–∞—Ç—å –ø–æ–≤—è–∑–∫—É', callback_data='bandage_dwnd')

	donw_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–ì–æ—Ç–æ–≤–æ ‚úì', callback_data='done')
	
	reset_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–°–±—Ä–æ—Å–∏—Ç—å', callback_data='reset')
	
	delete_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='–£–¥–∞–ª–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞–¥ –ø–æ–≤—è–∑–∫–æ–π', callback_data='delete_sw')
	
	pass_btn: InlineKeyboardButton = InlineKeyboardButton(
		text='-', callback_data='passs')
	
	

	# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	keyboard3: InlineKeyboardMarkup = InlineKeyboardMarkup()
	keyboard3.row(up_btn,   first_layer_btn, bodyPart_btn, pass_btn)
	keyboard3.row(info_btn, overlay_btn,     pepetype_btn, reset_btn)
	keyboard3.row(down_btn, pose_btn,        negative_btn, bndg_downl)
	keyboard3.row(pass_btn, delete_btn,        bw_btn,       donw_btn)
	

	
	listOfClients[id].change_e = not listOfClients[id].change_e
	listOfClients[id].delete_mess = True
	txt11 = "–ê–ª–µ–∫—Å" if listOfClients[id].slim else "–°—Ç–∏–≤"
	txt1 = f"*–í–µ—Ä—Å–∏—è —Å–∫–∏–Ω–∞:* {txt11}\n"
	txt2 = f"*–ü–æ–∑–∏—Ü–∏—è –ø–æ–≤—è–∑–∫–∏:* {listOfClients[id].pos}\n"
	txt12 = "–í–∫–ª" if listOfClients[id].overlay else "–í—ã–∫–ª"

	txt13 = "–í—ã–∫–ª"
	if listOfClients[id].first_layer == 0: txt13 = "–í—ã–∫–ª"
	elif listOfClients[id].first_layer == 1: txt13 = "–ü–æ–¥–∫–ª–∞–¥–∫–∞"
	elif listOfClients[id].first_layer == 2: txt13 = "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤—è–∑–∫–∏"

	body = ["–õ–µ–≤–∞—è —Ä—É–∫–∞", "–õ–µ–≤–∞—è –Ω–æ–≥–∞", "–ü—Ä–∞–≤–∞—è —Ä—É–∫–∞", "–ü—Ä–∞–≤–∞—è –Ω–æ–≥–∞"]
	txt7 = f"*–ß–∞—Å—Ç—å —Ç–µ–ª–∞:* {body[listOfClients[id].absolute_pos]}\n"

	txt14 = "–í–∫–ª" if listOfClients[id].bw else "–í—ã–∫–ª"
	txt15 = "–í–∫–ª" if listOfClients[id].negative else "–í—ã–∫–ª"
	txt16 = "–í–∫–ª" if listOfClients[id].delete_pix else "–í—ã–∫–ª"
	e = "e" if listOfClients[id].change_e else "–µ"
	txt3 = f"*–û–≤–µ—Ä–ª–µ–π:* {txt12}\n"
	txt4 = f"*–ü–µ—Ä–≤—ã–π —Å–ª–æ–π:* {txt13}\n"
	txt5 = f"*–ß—ë—Ä–Ω–æ-–±{e}–ª—ã–π:* {txt14}\n"
	txt6 = f"*–ù–µ–≥–∞—Ç–∏–≤:* {txt15}\n"
	txt8 = f"*–£–¥–∞–ª–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞–¥ –ø–æ–≤—è–∑–∫–æ–π:* {txt16}\n"
	
	try:
			
		msg = await listOfClients[id].info_id.edit_text(
			f"*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n{txt1}{txt2}{txt3}{txt4}{txt5}{txt6}{txt7}{txt8}",
			reply_markup=keyboard3, parse_mode='Markdown')

	except:pass

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="reset")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return

	await reset_accept(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="up")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	if listOfClients[id].pos > 0:
		listOfClients[id].pos -= 1

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="delete_sw")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].delete_pix = not listOfClients[id].delete_pix


	await render_and_edit(message.message, id, id1)
	await start_set(message.message)



#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="pose")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].pose += 1

	if listOfClients[id].pose > len(listOfClients[id].poses[0]) - 1: listOfClients[id].pose = 0

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="bw")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].bw = not listOfClients[id].bw

	await render_and_edit(message.message, id, id1)

	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="negative")
async def from_f(message: CallbackQuery):

	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].negative = not listOfClients[id].negative

	await render_and_edit(message.message, id, id1)


	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="down")
async def from_f(message: CallbackQuery):
	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	if listOfClients[id].pos < 7:
		listOfClients[id].pos += 1

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="first")
async def from_f(message: CallbackQuery):
	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].first_layer += 1

	if listOfClients[id].first_layer > 2: listOfClients[id].first_layer = 0

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)

#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="over")
async def from_f(message: CallbackQuery):
	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].overlay = not listOfClients[id].overlay

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)


#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="body_part")
async def from_f(message: CallbackQuery):
	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].absolute_pos += 1

	if listOfClients[id].absolute_pos > 3: listOfClients[id].absolute_pos = 0

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)
#---------------------------------------------------------------------------------------------------
@dp.callback_query_handler(text="pepe")
async def from_f(message: CallbackQuery):
	id1 = message.message.chat.id
	global listOfClients
	id = client.find_client(listOfClients, message.message.chat.id)
	if id == -1: 
		await message.message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	listOfClients[id].pepe_type += 1

	if listOfClients[id].pepe_type > len(listOfClients[id].pepes) - 1: listOfClients[id].pepe_type = 0

	await render_and_edit(message.message, id, id1)
	await start_set(message.message)
#---------------------------------------------------------------------------------------------------
@dp.message_handler(content_types=['text'])
async def echo(message: types.Message):
	global andcool_alert
	global listOfClients
	id = client.find_client(listOfClients, message.chat.id)
	if id == -1: 
		await message.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–û—Ç–ø—Ä–∞—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
		return
	id1 = message.chat.id

	if andcool_alert == True and message.from_user.id == 1197005557:
		global not_alert

		for x in not_alert:
			if x != "\n" and x != "":
				try:
					await bot.send_message(int(x), f"{message.text}\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /stopalerts")
				except: pass
		andcool_alert = False
	elif listOfClients[id].wait_to_support:
		await bot.send_message(chat_id=-952490573, text=f"{message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏–ª: {message.from_user.username}\n–ï–≥–æ id: {message.from_user.id}")
		listOfClients[id].wait_to_support = False
	elif message.from_user.is_bot == False:
		
		#if listOfClients[id].delete_mess: await message.delete()
	

		if listOfClients[id].wait_to_file == 2:
			done = await listOfClients[id].init_mc_n(message.text)
			if done == 1 or done == 3:
				if done == 3: await message.answer("–£ –≤–∞—à–µ–≥–æ —Å–∫–∏–Ω–∞ –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω!\n–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º!")
				listOfClients[id].wait_to_file = 0

				await listOfClients[id].prerender()

				skin_rer = await listOfClients[id].rerender()
				bio = BytesIO()
				bio.name = f'{id1}.png'
				skin_rer.save(bio, 'PNG')
				bio.seek(0)

				msg = await message.answer_photo(bio, "–í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
				listOfClients[id].prewiew_id = msg


				msg = await colorDialog(message, id)
				listOfClients[id].info_id = msg

			elif done == 2: await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∫–∏–Ω—ã –¥–æ –≤–µ—Ä—Å–∏–∏ 1.8 –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è(")
			

			else:
				await message.answer("–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω(")
		if listOfClients[id].wait_to_file == 3:
			try:
				try: await listOfClients[id].error_msg.delete()
				except: pass
				await message.delete()
				msg_c = message.text.lstrip('#')

				input1 = msg_c.split(", ")
				input2 = msg_c.split(",")

				if len(input1) == 1 and len(input2) == 1:
					colour = tuple(int(msg_c[i:i + 2], 16) for i in (0, 2, 4))
				else:
					if len(input1) == 1:
						colour = (int(input2[0]), int(input2[1]), int(input2[2]))
					else:
						colour = (int(input1[0]), int(input1[1]), int(input1[2]))

				r, g, b = colour
				if r > 255 or g > 255 or b > 255 or r < 0 or g < 0 and b < 0: 
					raise ZeroDivisionError
				listOfClients[id].colour = colour

				
				listOfClients[id].wait_to_file = 0
				await render_and_edit(message, id, id1)

				big_button_4: InlineKeyboardButton = InlineKeyboardButton(
					text='–ì–æ—Ç–æ–≤–æ ‚úì', callback_data='done_c')

				big_button_5: InlineKeyboardButton = InlineKeyboardButton(
					text='–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç', callback_data='colD')

				# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				keyboard1: InlineKeyboardMarkup = InlineKeyboardMarkup(
					inline_keyboard=[[big_button_4], [big_button_5]])
				msg = await listOfClients[id].info_id.edit_text("–ì–æ—Ç–æ–≤–æ?", reply_markup=keyboard1)
				listOfClients[id].info_id = msg

			except Exception as e:
				print(e)
				text1 = "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–≤–µ—Ç–∞ HEX –∏ RGB, –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n#ffffff\nffffff\n255,255,255\n255, 255, 255 –∏ —Ç.–ø."
				msg = await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç(\n" + text1 + "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
				listOfClients[id].error_msg = msg


if on_server: keep_alive()

@dp.message_handler()
async def event():
	try:
		event_da = da.get_event()
		da.reset_event()
		if event_da != -1:
			for x in range(len(event_da)):
				await bot.send_message(event_da[x][1], f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {event_da[x][0]} RUB")
				await bot.send_message(chat_id=-952490573, text=f"{event_da[x][2]} –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ {event_da[x][0]} RUB")

				if float(event_da[x][3]) < 200 and float(event_da[x][4]) >= 200:
					await bot.send_message(chat_id=-952490573, text=f"–°–¥–µ–ª–∞—Ç—å —Å–∫–∏–Ω –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–≥—Ä–æ–∫—É {event_da[x][2]}")
			
	except Exception:
		pass


async def scheduler():
    schedule.every(5).seconds.do(event)
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)
        
async def on_startup(dp): 
    asyncio.create_task(scheduler())

if __name__ == '__main__':
	started = True
	while started:
		try:
			executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
			started = False
		except Exception:
			started = True
			print("An error has occurred, reboot in 10 seconds")
			time1.sleep(10)
			print("rebooting...")